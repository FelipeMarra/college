Programa -> program id ; Bloco
Bloco -> DeclaracaoSeq begin ComandoSeq end
DeclaracaoSeq -> Declaracao DeclaracaoSeq
DeclaracaoSeq -> ε
Declaracao -> var VarList : Type ;
VarList -> id VarList2
VarList2 -> , id VarList2
VarList2 -> ε
Type -> boolean
Type -> integer
Type -> real
Type -> string
ComandoSeq -> Comando ComandoSeq
ComandoSeq -> ε
Comando -> id := Expr ;
Comando -> if Expr then ComandoSeq end
Comando -> while Expr do ComandoSeq end
Comando -> print Expr ;
Comando -> read id ;
Expr -> Rel ExprOpc
ExprOpc -> OpIgual Rel ExprOpc
ExprOpc -> ε
OpIgual -> ==
OpIgual -> !=
Rel -> Adicao RelOpc
RelOpc -> OpRel Adicao RelOpc
RelOpc -> ε
OpRel -> <
OpRel -> <=
OpRel -> >
OpRel -> >=
Adicao -> Termo AdicaoOpc
AdicaoOpc -> OpAdicao Termo AdicaoOpc
AdicaoOpc -> ε
OpAdicao -> +
OpAdicao -> -
Termo -> Fator TermoOpc
TermoOpc -> OpMult Fator TermoOpc
TermoOpc -> ε
OpMult -> *
OpMult -> /
Fator -> id
Fator -> integer_const
Fator -> real_const
Fator -> TRUE
Fator -> FALSE
Fator -> STRING_LITERAL
Fator -> ( Expr )

Obs 1: id é o token para os identificadores. Um identificador, ou seja, o nome de uma variável
pode começar com letra e depois ser seguido por letra, número e underline sendo
representados pela expressão regular [a-zA-Z]([a-zA-Z0-9_])*.

Obs 2: integer_const é o token que representa os números inteiros [0-9]([0-9])* e real_const é
o token para os números de ponto flutuante. Considere que somente são aceitos números de
ponto flutuante com dígitos antes e depois do ponto. Ex: 2.4, 534.55. Não são aceitos
números na notação científica.

Obs 3: O operador := é o operador de atribuição.

Obs 4: "[a-zA-Z0-9_,;?# ]*" é o lexema para as strings literais (cadeias de caracters). Uma
string literal começa e termina com aspas duplas. A expressão [a-zA-Z0-9_,;?# ]* dentro da
string é uma expressão regular que representa uma palavra com zero ou mais combinações
de letras minúsculas, letras maiúsculas, números, underline, vírgula, ponto e vírgula,
interrogação, cerquilha ou "jogo da velha" e espaço. Exemplos de strings válidas: "sdfk23",
"2344", "casa", "Tempo", "SOL", "skdfkm23235FNFOWOF?", "Rua Fulad_2 139, 234 #".

Obs 5: TRUE é o token para o lexema true, isto é, é o token para o valor literal true. FALSE é
o token para o lexema false, isto é, é o token para o valor literal false.

Obs 6: STRING_LITERAL é o token para o lexema "[a-zA-Z0-9_,;?# ]*" das strings literais.

Obs 7: Na implementação, você pode considerar os nomes dos tokens como sendo formados
somente por letras maiúsculas.